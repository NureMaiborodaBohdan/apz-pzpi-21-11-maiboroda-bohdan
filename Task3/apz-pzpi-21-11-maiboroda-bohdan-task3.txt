1 КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ


	Розроблена IoT частина взаємодіє з одним типом користувачів, тобто працівниками виробництва. Смарт девайс матиме можливість вимірювати дані пов’язані з алкогольним сп’янінням працівника.
	Для початку роботи з IoT частиною потрібно здійснити вхід в систему за допомогою консолі, тобто ввести аутентифікаційні дані, назву облікового запису та пароль. Після входу в систему користувач матиме змогу вимірювати показник алкогольного сп’яніння. 
	IoT пристрій працює в одному потоці та виконує такий ряд функцій:
a)	функція authenticateUser:
1)	аутентифікація користувача, надсилаючи POST запит з логіном і паролем до сервера;
2)	отримання відповіді від сервера, отримання токену аутентифікації, якщо вхід в систему пройшов успішно.
b)	функція simulateDataAndSend:
1)	генерація випадкових даних рівня алкоголю в крові, поточний час та опис тестування;
2)	формування JSON об'єкта з даними;
3)	виклик функції sendPostRequest для відправки даних на сервер.
c)	функція sendPostRequest:
1)	виконує відправку POST запиту з даними JSON на вказаний URL;
2)	використання libcurl для виконання HTTP запиту;
3)	обробка відпові від сервера.
	Взаємодію користувача з системою представлено на діаграмі прецедентів (див. додаток А.1).


2 ОПИС РОЗРОБКИ ЗАСТОСУНКУ ДЛЯ ВБУДОВАНИХ СИСТЕМ


	Під час розробки цієї частини програмної системи була обрана клієнт-серверна архітектурна модель, що дозволяє досягти оптимального балансу між простотою реалізації та можливістю масштабування. Такий підхід забезпечує ефективну роботу системи навіть із зростанням її складності та дозволяє легко інтегрувати підтримку нових пристроїв без значних змін у внутрішньому коді.
	Одним із головних аспектів нашого підходу є зменшення використання постійної пам'яті. Це покращує продуктивність системи та знижує вимоги до обладнання. У результаті система здатна функціонувати на різних пристроях з обмеженими ресурсами, забезпечуючи швидку обробку даних та стабільну роботу.		
	Результатом вибору архітектурних рішень є створення UML діаграми діяльності, яка відображає структуру та взаємодію компонентів системи (див. додаток А.2) 			

3 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ
3.1 Опис використаних технологій


	Для демонстрації роботи IoT частини було обрано мову програмування C++, що максимально наближено до апаратних вимог IoT пристроїв.
Для відображення інформації використовується командний інтерфейс (CLI) з використанням компілятора MSVC (Microsoft Visual C++), передача даних до серверної частини відбувається завдяки бібліотеці curl у форматі JSON. 
Використано стандартні бібліотеки та інструменти, такі як libcurl для виконання HTTP запитів та nlohmann/json для обробки JSON даних, що значно спрощує розробку та підтримку коду. Також такий підхід полегшує інтеграцію з існуючими системами та забезпечує можливість швидко реагувати на зміни вимог або умов експлуатації.
Взаємозв’язки між пакетами IoT частини відображено на діаграмі пакетів (див. рис. 1).
	Програма IoT частини написана з мінімальним обсягом коду для оптимізації під обмежену потужність пристроїв та легкості переносу на реальні IoT пристрої.

3.2 Опис результатів розробки частини проекту для вбудованих систем

	Результатом розробки IoT частини програмної системи є застосунок для вбудованих систем, який може бути використаний на різних пристроях. Користувачу необхідно вказати логін та пароль для аутентифікації в системі та продовження роботи з нею. 
Після успішної ініціалізації програма створює один потік, який реалізовує в собі такі функції як авторизація, генерація даних та відправка даних на сервер. Під час взаємодії з серверною частиною програма отримує та надсилає дані на сервер використовуючи для цього відповідні кінцеві точки на стороні серверу.
	Програмна система продовжує вимірювати рівень алкогольного сп’яніння працівника та надсилати дані на сервер до тих пір, поки користувач не вийде із застосунку. 
Для відображення структури проекту була створена UML діаграма взаємодії (див. додаток А.3).


4 ОПИС РЕЗУЛЬТАТІВ ТЕСТУВАННЯ ЧАСТИНИ ПРОЕКТУ ДЛЯ ВБУДОВАНИХ СИСТЕМ

	Описаний IoT пристрій використовує просту RESTful API специфікацію з наступними ендпоінтами: POST /auth/login – здійснення входу в систему, POST /api/user/{userID}/testresults – відправка результатів вимірювання алкоголю в крові працівника виробництва на серверну частину. 
	У ході тестування вбудованої системи, розробленої для проекту, було здійснено комплексну перевірку функціональності та надійності програмного забезпечення. Тестування проводилося за допомогою програмного забезпечення Visual Studio 2022 методом відправлення даних на відповідні кінцеві точки серверу.


ВИСНОВКИ


	У ході виконання лабораторної роботи були отримані навички з проєктування IoT частини програмної системи. Результатом роботи є розроблена програмна реалізація IoT програмної частини. При розробці продукту дотримувались вимоги до чистого коду мови програмування C++.



